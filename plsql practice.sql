--type record 

DECLARE
TYPE EMP_REC IS RECORD(
V_NAME EMPLOYEES.FIRST_NAME%TYPE,
V_SALARY EMPLOYEES.SALARY%TYPE
);

V_EMP_REC EMP_REC;
BEGIN
  SELECT LAST_NAME,SALARY INTO V_EMP_REC FROM EMPLOYEES E WHERE E.EMPLOYEE_ID = 100;
  DBMS_OUTPUT.put_line(V_EMP_REC.V_NAME||','||V_EMP_REC.V_SALARY);

END;
/

-- rowtype


DECLARE
V_EMP_REC employees%rowtype;
BEGIN
  SELECT * INTO V_EMP_REC FROM EMPLOYEES E WHERE E.EMPLOYEE_ID = 100;
  DBMS_OUTPUT.put_line(V_EMP_REC.last_name||','||V_EMP_REC.salary);

END;
/

--要求: 查询出 150号 员工的工资, 若其工资大于或等于 10000 则打印 'salary >= 10000'; 
--若在 5000 到 10000 之间, 则打印 '5000<= salary < 10000'; 否则打印 'salary < 5000'

DECLARE 
V_SALARY EMPLOYEES.Salary%type;
BEGIN
  SELECT SALARY INTO V_SALARY FROM EMPLOYEES WHERE EMPLOYEE_ID = 150;
  IF V_SALARY >= 10000 
  THEN DBMS_OUTPUT.put_line('salary >= 10000');
  ELSIF V_SALARY >= 5000 AND V_SALARY <10000
  THEN DBMS_OUTPUT.put_line('5000<= salary < 10000');
  ELSE DBMS_OUTPUT.put_line('5000<= salary < 5000') ;        
  END IF;
  

END;
/


DECLARE 
V_SALARY EMPLOYEES.SALARY%TYPE;
V_TEMP VARCHAR2(100);

BEGIN
  SELECT SALARY INTO V_SALARY FROM EMPLOYEES WHERE EMPLOYEE_ID = 150;
  V_TEMP := 
  CASE 
  WHEN V_SALARY >= 10000  THEN  'salary >= 10000'
  WHEN V_SALARY >= 5000 THEN '5000<= salary < 10000'
  ELSE '5000<= salary < 5000'
  END;
  
  DBMS_OUTPUT.put_line(V_TEMP); 

END; 

/*
查询出 122 号员工的 JOB_ID, 若其值为 'IT_PROG', 则打印 'GRADE: A'; 
              'AC_MGT', 打印 'GRADE B', 
              'AC_ACCOUNT', 打印 'GRADE C'; 
              否则打印 'GRADE D'
*/

DECLARE
V_JOB_ID EMPLOYEES.JOB_ID%TYPE;
V_TEMP VARCHAR2(100);
BEGIN 
  SELECT JOB_ID INTO V_JOB_ID FROM EMPLOYEES WHERE EMPLOYEE_ID = 122;
  V_TEMP :=
  CASE V_JOB_ID
       WHEN 'IT_PROG' THEN 'GRADE: A'
       WHEN 'AC_MGT' THEN 'GRADE B'
       WHEN 'AC_ACCOUNT' THEN 'GRADE C'
       ELSE 'GRADE D' 
  END;
  DBMS_OUTPUT.put_line(V_TEMP);
    

END;

--9. 使用循环语句打印 1 - 100.（三种方式）

DECLARE
V_INT NUMBER(10):=1;

BEGIN 
  LOOP
      DBMS_OUTPUT.put_line(V_INT||' ');
      V_INT := V_INT+1;
  EXIT WHEN V_INT >100;
  END LOOP;        
  

END;
/


DECLARE
V_INT NUMBER(10):=0;

BEGIN 
  WHILE V_INT < 100 LOOP
     V_INT := V_INT+1;
    DBMS_OUTPUT.put_line(V_INT||' ');   
  END LOOP;  
END;
/


DECLARE
BEGIN 
 FOR INT IN 1..100 LOOP
    DBMS_OUTPUT.put_line(INT||' ');   
 END LOOP;
END;          

--10. 综合使用 if, while 语句, 打印 1 - 100 之间的所有素数
--(素数: 有且仅用两个正约数的整数, 2, 3, 5, 7, 11, 13, ...).

DECLARE
BEGIN
  Dbms_Output.put_line(TRUNC(SQRT(6))||' '||MOD(6,2));
END;



DECLARE 
V_NUM NUMBER(3):=1;
V_K NUMBER(2) :=0;
V_TEMP NUMBER(3):=0;
V_INT NUMBER(2);
V_IS_PRIME BOOLEAN;
BEGIN 
  WHILE V_NUM < 100 LOOP
    V_IS_PRIME := FALSE;
    V_K := TRUNC(SQRT(V_NUM));
    V_INT:= 2;
    IF V_K < 2 
    THEN  V_TEMP := V_NUM; DBMS_OUTPUT.put_line(V_TEMP); 
    ELSE
      
      WHILE V_INT <= V_K LOOP
        
        IF MOD(V_NUM,V_INT) = 0 THEN          
           V_IS_PRIME := TRUE; 
        END IF;
        V_INT := V_INT+1;          
      END LOOP;
     -- DBMS_OUTPUT.put_line(V_NUM||' '||BOOLEAN_TO_CHAR(V_IS_PRIME)); 
      IF NOT V_IS_PRIME THEN       
        V_TEMP := V_NUM;
        DBMS_OUTPUT.put_line(V_TEMP); 
      END IF;  
    END IF;  
   
    V_NUM := V_NUM+1;
  END LOOP;

END;
/


DECLARE
V_FLAG BOOLEAN;
V_K NUMBER(2);
V_J NUMBER(2);
BEGIN
  FOR I IN 1..100 LOOP
    V_FLAG := FALSE;
    V_K := TRUNC(SQRT(I));
    V_J := 2;
    WHILE V_J <= V_K LOOP
      IF MOD(I,V_J) = 0 THEN
        V_FLAG := TRUE;
      END IF;  
    V_J := V_J+1;
    END LOOP;
    
    IF NOT V_FLAG THEN
      DBMS_OUTPUT.put_line(I);    
    END IF;      
  END LOOP; 


END;

--11+.打印1――100的自然数，当打印到50时，跳出循环，输出“打印结束”
DECLARE
BEGIN
  FOR I IN 1..100 LOOP
    DBMS_OUTPUT.put_line(I);
    IF I = 50 THEN
     GOTO L_COUNT50;
    END IF;  
  
  END LOOP;
  <<L_COUNT50>>
  DBMS_OUTPUT.PUT_LINE('PRINTING END');
END;


DECLARE
BEGIN
  FOR I IN REVERSE 1..100 LOOP
    DBMS_OUTPUT.put_line(I);
    IF I = 50 THEN
      DBMS_OUTPUT.PUT_LINE('PRINTING END');
      EXIT;
    END IF;    
  END LOOP;
 DBMS_OUTPUT.PUT_LINE('HELLO');
END;


DECLARE
V_J NUMBER(3);
BEGIN 
  FOR I IN REVERSE 1..5 LOOP
    V_J := I;
    FOR J IN 1..V_J LOOP
      DBMS_OUTPUT.PUT_LINE('J: '||J);
      IF J = 3 THEN
        EXIT;
      END IF;  
    END LOOP;
    DBMS_OUTPUT.put_line('I: '||I);
  END LOOP;
END;
/





--要求: 打印出 80 部门的所有的员工的工资:salary: xxx

-- WITH CURSOR 
DECLARE
V_EMP_REC EMPLOYEES%ROWTYPE;
CURSOR EMP_CURSOR IS SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID = 80 ORDER BY EMPLOYEE_ID;
BEGIN 
/*  OPEN EMP_CURSOR;
  FETCH EMP_CURSOR INTO V_EMP_REC;
  WHILE EMP_CURSOR%FOUND LOOP
    DBMS_OUTPUT.put_line( V_EMP_REC.LAST_NAME ||'''S SALARY IS '||V_EMP_REC.SALARY||' '||EMP_CURSOR%ROWCOUNT);
    FETCH EMP_CURSOR INTO V_EMP_REC;
  END LOOP; 
  CLOSE EMP_CURSOR;*/
  
  FOR E IN EMP_CURSOR LOOP
    DBMS_OUTPUT.put_line( E.LAST_NAME ||'''S SALARY IS '||E.SALARY||' '||EMP_CURSOR%ROWCOUNT); 
  END LOOP;
END;
/

-- WITHOUT CURSOR
DECLARE
BEGIN 
  FOR T IN (SELECT * FROM EMPLOYEES E WHERE E.DEPARTMENT_ID = 80) LOOP
    DBMS_OUTPUT.put_line(T.LAST_NAME||'''S SALARY IS '||T.SALARY);
  END LOOP;

END;

--13. 使用游标的练习: 
--打印出 manager_id 为 100 的员工的 last_name, email, salary 信息(使用游标, 记录类型)
DECLARE
CURSOR MANAGER_CURSOR IS SELECT LAST_NAME, EMAIL,SALARY FROM EMPLOYEES WHERE MANAGER_ID = 100;
BEGIN
  FOR M IN MANAGER_CURSOR LOOP
    DBMS_OUTPUT.PUT_LINE(M.LAST_NAME||' '||M.EMAIL||' '||M.SALARY);
  END LOOP; 
END;

DECLARE
BEGIN
  FOR M IN (SELECT LAST_NAME, EMAIL, SALARY FROM EMPLOYEES WHERE MANAGER_ID = 100) LOOP
    DBMS_OUTPUT.PUT_LINE(M.LAST_NAME||' '||M.EMAIL||' '||M.SALARY);
  END LOOP;
END; 

--SELECT E.*,E.ROWID FROM EMPLOYEES E 
--查询前 10 名员工的信息.

DECLARE
BEGIN
  FOR E IN (SELECT * FROM (SELECT * FROM EMPLOYEES ORDER BY SALARY DESC) ESAL WHERE ROWNUM <=10)LOOP
    DBMS_OUTPUT.put_line(E.EMPLOYEE_ID||E.FIRST_NAME||E.LAST_NAME);
    
  END LOOP;

END;
--14. 利用游标, 调整公司中员工的工资: 
/*
工资范围       调整基数
    0 - 5000       5%
    5000 - 10000   3%
    10000 - 15000  2%
    15000 -        1%
*/

DECLARE
CURSOR EMP_CURSOR IS SELECT EMPLOYEE_ID, SALARY FROM EMPLOYEES;
V_EMPID EMPLOYEES.EMPLOYEE_ID%TYPE;
V_SALARY EMPLOYEES.SALARY%TYPE; 
BEGIN 
  FOR SAL IN EMP_CURSOR LOOP
    V_EMPID:= SAL.EMPLOYEE_ID;
    V_SALARY:= V_SAL;
    DBMS_OUTPUT.put_line ('EMP_ID '||V_EMPID||' OLD SALARY '|| V_SALARY);
    IF V_SALARY <= 5000 THEN
      V_SALARY := V_SALARY*1.05;
    ELSIF V_SALARY <= 10000 THEN
      V_SALARY := V_SALARY * 1.03;
    ELSIF V_SALARY <= 15000 THEN
      V_SALARY := V_SALARY * 1.02;
    ELSIF  V_SALARY > 15000 THEN
      V_SALARY := V_SALARY * 1.01;
    END IF;
     DBMS_OUTPUT.put_line ('EMP_ID '||V_EMPID||' NEW SALARY '|| V_SALARY);
    UPDATE EMPLOYEES E SET E.SALARY = V_SALARY WHERE E.EMPLOYEE_ID = V_EMPID;
    IF EMP_CURSOR%ROWCOUNT = 10 THEN 
      EXIT;
    END IF;   
  END LOOP;

END;

-- 16 CURSOR PARAMETER
DECLARE
CURSOR EMP_CURSOR(P_EMPID EMPLOYEES.EMPLOYEE_ID%TYPE) IS 
SELECT EMPLOYEE_ID,SALARY FROM EMPLOYEES WHERE EMPLOYEE_ID = P_EMPID;

V_EMPID EMPLOYEES.EMPLOYEE_ID%TYPE := &EMPID;
V_PER NUMBER(3,2);
BEGIN
  FOR SAL IN EMP_CURSOR(P_EMPID =>V_EMPID) LOOP
      IF  V_SAL <= 5000 THEN
         V_PER:=1.05;
      ELSIF  V_SAL <= 10000 THEN
         V_PER:=1.03;
      ELSIF  V_SAL <= 15000 THEN
         V_PER:=1.02;
      ELSIF  V_SAL > 15000 THEN
         V_PER:=1.01;
    END IF;  
    DBMS_OUTPUT.put_line ('update employee_id  '||SAL.EMPLOYEE_ID||'SALARY from'||V_SAL||'to '|| V_SAL*v_per);  
    UPDATE EMPLOYEES E SET E.SALARY = V_SAL*v_per WHERE E.EMPLOYEE_ID = SAL.EMPLOYEE_ID;

  END LOOP;

END;

select MAX(E.EMPLOYEE_ID) from employees e where e.employee_id = 103;
/
DECLARE
V_EMPID EMPLOYEES.EMPLOYEE_ID%TYPE := &EMPID;
V_PER NUMBER(3,2);
BEGIN
   

  FOR SAL IN (select employee_id,salary from employees where employee_id = v_empid) LOOP
       
        
      IF  V_SAL <= 5000 THEN
         V_PER:=1.05;
      ELSIF  V_SAL <= 10000 THEN
         V_PER:=1.03;
      ELSIF  V_SAL <= 15000 THEN
         V_PER:=1.02;
      ELSIF  V_SAL > 15000 THEN
         V_PER:=1.01;
    END IF;  
    DBMS_OUTPUT.put_line ('update employee_id  '||SAL.EMPLOYEE_ID||'SALARY from'||V_SAL||'to '|| V_SAL*v_per);  
    UPDATE EMPLOYEES E SET E.SALARY = V_SAL*v_per WHERE E.EMPLOYEE_ID = SAL.EMPLOYEE_ID;
    


  END LOOP;
  


END;
/
select * from employees e where e.employee_id = 103;


--17. 隐式游标: 更新指定员工 salary(涨工资 10)，如果该员工没有找到，则打印”查无此人” 信息


DECLARE
 V_EMPID EMPLOYEES.EMPLOYEE_ID%TYPE := TO_NUMBER(NVL('&EMPID','207'));     
BEGIN
  UPDATE EMPLOYEES E SET E.SALARY = E.SALARY*1.1 WHERE E.EMPLOYEE_ID = V_EMPID;
  IF SQL%NOTFOUND THEN
    DBMS_OUTPUT.PUT_LINE(V_EMPID||' IS NOT FOUND');
  END IF;

END;
/



-- 16 CURSOR PARAMETER
DECLARE
CURSOR EMP_CURSOR IS 
SELECT EMPLOYEE_ID,SALARY FROM EMPLOYEES where rownum <=5
FOR UPDATE OF SALARY NOWAIT;
V_SAL EMPLOYEES.SALARY%TYPE;
V_PER NUMBER(3,2);
BEGIN
  --OPEN EMP_CURSOR;
  FOR SAL IN EMP_CURSOR LOOP
      V_SAL:= SAL.SALARY;
      IF  V_SAL <= 5000 THEN
         V_PER:=1.05;
      ELSIF  V_SAL <= 10000 THEN
         V_PER:=1.03;
      ELSIF  V_SAL <= 15000 THEN
         V_PER:=1.02;
      ELSIF  V_SAL > 15000 THEN
         V_PER:=1.01;
    END IF;  
    DBMS_OUTPUT.put_line ('update employee_id  '||SAL.EMPLOYEE_ID||'SALARY from'||V_SAL||'to '|| V_SAL*v_per);  
    UPDATE EMPLOYEES E SET E.SALARY = V_SAL*v_per WHERE CURRENT OF EMP_CURSOR; 

  END LOOP;
 --  CLOSE EMP_CURSOR;
END;
--表中查询某部门的员工情况，将其资最低定为 3000
DECLARE
 CURSOR EMP_CURSOR(P_DPT_ID EMPLOYEES.DEPARTMENT_ID%TYPE) IS 
 SELECT EE.EMPLOYEE_ID FROM EMPLOYEES EE WHERE EE.SALARY = 
 (SELECT MIN(SALARY) FROM EMPLOYEES WHERE DEPARTMENT_ID = P_DPT_ID)
 FOR UPDATE OF SALARY NOWAIT;
 
 V_DEPT_ID EMPLOYEES.DEPARTMENT_ID%TYPE := &DPT_ID;
  
BEGIN 
  FOR DEPT IN EMP_CURSOR(P_DPT_ID=>V_DEPT_ID) LOOP
    UPDATE EMPLOYEES E SET E.SALARY = 3000,E.COMMISSION_PCT= 0.15 WHERE CURRENT OF EMP_CURSOR;
    DBMS_OUTPUT.put_line(DEPT.EMPLOYEE_ID ||'''S SAL HAS BEEN UPDATED TO 3000');
  END LOOP;

END;
/

SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID = 80 ORDER BY SALARY; 



-- EXCEPTION
DECLARE
  V_EMPID EMPLOYEES.EMPLOYEE_ID%TYPE := &EMPID;
  V_SAL EMPLOYEES.SALARY%TYPE; 
BEGIN 
  SELECT SALARY INTO V_SAL FROM EMPLOYEES WHERE EMPLOYEE_ID = V_EMPID;
  DBMS_OUTPUT.put_LINE(V_SAL);
EXCEPTION
  WHEN NO_DATA_FOUND THEN 
     DBMS_OUTPUT.put_line(V_EMPID||' IS NOT EXISTING');
END; 

-- DELETE DUP RECORDS
DELETE FROM JH_DUP J1 WHERE J1.ROWID > (SELECT MIN(J2.ROWID) FROM JH_DUP J2 
WHERE J1.EMPLOYEE_ID = J2.EMPLOYEE_ID
AND J1.START_DATE = J2.START_DATE
AND J1.JOB_ID = J2.JOB_ID
AND J1.DEPARTMENT_ID = J2.DEPARTMENT_ID ); 

SELECT * FROM JH_DUP;

SELECT COUNT(J.EMPLOYEE_ID),J.EMPLOYEE_ID,J.JOB_ID FROM  JH_DUP J
GROUP BY J.EMPLOYEE_ID,J.START_DATE,J.END_DATE,J.JOB_ID,J.DEPARTMENT_ID; 

--19. 更新指定员工工资，如工资小于3000，则加100；对 NO_DATA_FOUND 异常, TOO_MANY_ROWS 进行处理.
DECLARE

BEGIN
  
EXCEPTION
WHEN THEN;
END;


   
