-- USE CONDITIONAL PREDICATES FOR TRIGGER
CREATE OR REPLACE TRIGGER AFTER_MOD_EMP_TRIG AFTER
INSERT OR UPDATE OR DELETE ON EMPLOYEES 
FOR EACH ROW
BEGIN
  CASE 
  WHEN INSERTING THEN
    Dbms_Output.put_line('Inserted eid '||:NEW.EMPLOYEE_ID);
  WHEN UPDATING THEN
    dbms_output.put_line('updated eid '||:OLD.EMPLOYEE_ID);
  WHEN  DELETING THEN 
    DBMS_OUTPUT.put_line('DELETED EDI '||:OLD.EMPLOYEE_ID);   
  END CASE; 
END; 
/

SELECT * FROM EMPLOYEES; 
BEGIN
  UPDATE EMPLOYEES E SET E.SALARY = E.SALARY +100 WHERE E.EMPLOYEE_ID = 101;
  INSERT INTO EMPLOYEES SELECT 666,
                        FIRST_NAME,
                        LAST_NAME,
                        'TEST666@GMAIL.COM',
                        PHONE_NUMBER,
                        HIRE_DATE,
                        JOB_ID,
                        SALARY,
                        COMMISSION_PCT,
                        MANAGER_ID,
                        DEPARTMENT_ID FROM EMPLOYEES WHERE EMPLOYEE_ID = 888; 
  DELETE FROM EMPLOYEES E WHERE E.EMPLOYEE_ID = 666;                      

END;

-- USE SELECT OF ON CONDITIONAL PREDICATES

CREATE OR REPLACE TRIGGER AFTER_UPDATE_EMP_IMP AFTER
UPDATE OF SALARY,HIRE_DATE,COMMISSION_PCT
ON EMPLOYEES
FOR EACH ROW
BEGIN
    IF UPDATING ('SALARY') THEN
      DBMS_OUTPUT.put_line('UPDATE SALARY FROM '||:OLD.SALARY||' TO '||:NEW.SALARY);
      DBMS_OUTPUT.put_line('DIFFERENCE IS '|| (:NEW.SALARY -:OLD.SALARY ));
    END IF;    
    IF UPDATING ('HIRE_DATE') THEN
      DBMS_OUTPUT.put_line('UPDATE HIRE_DATE FROM '||:OLD.HIRE_DATE||' TO '||:NEW.HIRE_DATE);
    END IF;  
    IF UPDATING ('COMMISSION_PCT') THEN
      DBMS_OUTPUT.put_line('UPDATE COMM');
    END IF;    

END;
/


BEGIN
  UPDATE EMPLOYEES E SET E.SALARY = E.SALARY*1.2 WHERE E.EMPLOYEE_ID = 101;
  UPDATE EMPLOYEES E SET E.SALARY = E.SALARY + 200, E.HIRE_DATE = SYSDATE -10, E.COMMISSION_PCT = 0.8 WHERE E.EMPLOYEE_ID = 102;  

END; 

-- updaet :NEW & CONDITIONAL TRIGGER & REFERENCING
CREATE OR REPLACE TRIGGER BEF_UPDATE_DEPARTMENT_NAME BEFORE
UPDATE ON DEPARTMENTS
REFERENCING NEW AS N  
FOR EACH ROW
WHEN (OLD.MANAGER_ID IS NULL)
BEGIN  
  :N.DEPARTMENT_NAME := :N.DEPARTMENT_NAME ||'('||:OLD.LOCATION_ID||')';  
END; 
/

UPDATE DEPARTMENTS D SET D.DEPARTMENT_NAME = 'T'||' '||D.DEPARTMENT_NAME;  

SELECT * FROM DEPARTMENTS; 

-- object_value trigger

-- PREPARE TABLES
BEGIN 
CREATE OR REPLACE TYPE OT AS OBJECT (EMPID NUMBER(6), ELN VARCHAR2(25), SALARY NUMBER(8,2));
CREATE TABLE OTT OF OT;
CREATE TABLE OTT_HIS(D DATE, OLD_OBJ OT, NEW_OBJ OT); 
INSERT INTO OTT SELECT E.EMPLOYEE_ID, E.LAST_NAME, E.SALARY FROM EMPLOYEES E WHERE E.EMPLOYEE_ID < 110;  

END;
/

SELECT * FROM OTT;
-- DEFINE TRIGGER
CREATE OR REPLACE TRIGGER AFTER_UPD_OTT AFTER
UPDATE ON OTT
FOR EACH ROW
BEGIN
  INSERT INTO OTT_HIS VALUES (SYSDATE, :OLD.OBJECT_VALUE, :NEW.OBJECT_VALUE); 

END;
/  


-- TEST

UPDATE OTT T SET T.SALARY = T.SALARY + 100;  
SELECT * FROM OTT_HIS; 

CREATE OR REPLACE TYPE OT2 AS OBJECT (EMPLOYEES%ROWTYPE);

-- instead of trigger

-- create view
CREATE OR REPLACE VIEW EMPLOYEE_DEPARTMENT_DETAIL AS
SELECT E.EMPLOYEE_ID, D.DEPARTMENT_ID,E.LAST_NAME,D.DEPARTMENT_NAME FROM EMPLOYEES E, DEPARTMENTS D
WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID;


-- create trigger
CREATE OR REPLACE TRIGGER UPDATE_EMP_DEPT_VIEW
INSTEAD OF UPDATE ON EMPLOYEE_DEPARTMENT_DETAIL
FOR EACH ROW
BEGIN
  IF :OLD.LAST_NAME != :NEW.LAST_NAME THEN
    UPDATE EMPLOYEES E SET E.LAST_NAME = :NEW.LAST_NAME WHERE E.EMPLOYEE_ID = :OLD.EMPLOYEE_ID;
  END IF;

   IF :OLD.DEPARTMENT_NAME != :NEW.DEPARTMENT_NAME THEN
    UPDATE DEPARTMENTS D SET D.DEPARTMENT_NAME = :NEW.DEPARTMENT_NAME WHERE D.DEPARTMENT_ID = :OLD.DEPARTMENT_ID;
  END IF;
END;
/

-- test
UPDATE EMPLOYEE_DEPARTMENT_DETAIL EDD SET EDD.LAST_NAME = 'TTT' , EDD.DEPARTMENT_NAME = 'T '||EDD.DEPARTMENT_NAME
WHERE EDD.EMPLOYEE_ID = 101;  

SELECT * FROM  EMPLOYEE_DEPARTMENT_DETAIL EDD WHERE EDD.EMPLOYEE_ID = 101; 

 
